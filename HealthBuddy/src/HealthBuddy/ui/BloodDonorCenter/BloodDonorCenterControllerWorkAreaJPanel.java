package HealthBuddy.ui.BloodDonorCenter;

import HealthBuddy.models.BloodDonorCenter.Inventory.BloodDonorCenterInventoryCatalog;
import HealthBuddy.models.BloodDonorCenter.Organisation.BDCControllerOrganisation;
import HealthBuddy.models.EcoSystem;
import HealthBuddy.models.Enterprise.EnterpriseBloodDonorCenter;
import HealthBuddy.models.Enterprise.Enterprise;
import HealthBuddy.models.Network.Network;
import HealthBuddy.models.Organisation.Organisation;
import HealthBuddy.models.User.User;
import HealthBuddy.models.WorkQueue.BloodControllerAttendantWQ;
import HealthBuddy.models.WorkQueue.WorkRequest;
import HealthBuddy.models.Healthcare.Organisation.HealthcareOrganisationAttendant;
import java.awt.CardLayout;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.awt.Image;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nidhi Singh
 */
public class BloodDonorCenterControllerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BloodDonorCenterControllerWorkAreaJPanel
     */
   
    private JPanel showPanel;
    private User userAccount;
    private BDCControllerOrganisation headsOrganisation;
    private EcoSystem system;
    private Network network;
    private EnterpriseBloodDonorCenter enterprise;
    private BloodDonorCenterInventoryCatalog bloodBankStockDirectory;

    public BloodDonorCenterControllerWorkAreaJPanel(JPanel displayJPanel, User userAccount, BDCControllerOrganisation headsOrganisation, EnterpriseBloodDonorCenter enterprise, Network network, EcoSystem business) {
               
       
        initComponents();
        this.showPanel=displayJPanel;
        this.headsOrganisation = headsOrganisation;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.system = business;
        this.network=network;
        this.userAccount=userAccount;
        this.bloodBankStockDirectory = this.headsOrganisation.getBbStockDirectory();    
        populateTable();
        setSize(1540,800);
    }
   
    
    
    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) BloodRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request :network.getBloodDonorCenterRequests().getWorkRequestList())
        {
            BloodControllerAttendantWQ nb = (BloodControllerAttendantWQ)request;
            Object[] row = new Object[4];
            row[0] = nb;
            row[1] = nb.getTypeOfBlood();
            row[2] = nb.getUnitsOfBlood();
            row[3]=request.getMessage();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane9 = new javax.swing.JScrollPane();
        BloodRequestJTable = new javax.swing.JTable();
        lblTitle9 = new javax.swing.JLabel();
        btnAccept9 = new javax.swing.JButton();
        btnBack9 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder("Blood Requests"));
        setForeground(new java.awt.Color(0, 102, 102));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BloodRequestJTable.setForeground(new java.awt.Color(0, 102, 102));
        BloodRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Blood Group", "Quantity Required", "Request Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(BloodRequestJTable);
        if (BloodRequestJTable.getColumnModel().getColumnCount() > 0) {
            BloodRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            BloodRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            BloodRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            BloodRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 540, 170));

        lblTitle9.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle9.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitle9.setForeground(new java.awt.Color(0, 102, 102));
        lblTitle9.setText("Blood Request");
        add(lblTitle9, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 260, 34));

        btnAccept9.setBackground(new java.awt.Color(0, 102, 102));
        btnAccept9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAccept9.setForeground(new java.awt.Color(255, 255, 255));
        btnAccept9.setText("Accept Request");
        btnAccept9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnAccept9.setBorderPainted(false);
        btnAccept9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccept9ActionPerformed(evt);
            }
        });
        add(btnAccept9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 420, 190, 40));

        btnBack9.setBackground(new java.awt.Color(0, 102, 102));
        btnBack9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnBack9.setForeground(new java.awt.Color(255, 255, 255));
        btnBack9.setText("Back");
        btnBack9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack9.setBorderPainted(false);
        btnBack9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack9ActionPerformed(evt);
            }
        });
        add(btnBack9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1293, 30, 90, 40));

        ImageIcon imageIcon =  new ImageIcon(new ImageIcon(getClass().getResource("/HealthBuddy/ui/images/bloodRequest.jpg")).getImage().getScaledInstance(950, 550, Image.SCALE_DEFAULT));
        jLabel1.setIcon(imageIcon);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 80, 900, 640));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAccept9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccept9ActionPerformed
       int selectedRow=BloodRequestJTable.getSelectedRow();
       
       if(selectedRow<0)
       {
           JOptionPane.showMessageDialog(null, "Kindly Select a Row","Warning", JOptionPane.WARNING_MESSAGE);
       }
       else
       {
           BloodControllerAttendantWQ  bloodHeadAttendentWorkQueue = (BloodControllerAttendantWQ)BloodRequestJTable.getValueAt(selectedRow, 0);
           boolean result = bloodBankStockDirectory.checkBloodQuantity(bloodHeadAttendentWorkQueue.getTypeOfBlood(), bloodHeadAttendentWorkQueue.getUnitsOfBlood());
           
           if(bloodHeadAttendentWorkQueue.getMessage().equals("Blood Supplied"))
           {
               JOptionPane.showMessageDialog(null, "Hurray! Delivery of Blood made earlier than expected","Warning", JOptionPane.WARNING_MESSAGE);
           }
           
           else if(result == true)
           {
                    bloodHeadAttendentWorkQueue.setMessage("Blood Supplied");
                    populateTable();
                
                    BloodControllerAttendantWQ bhawq= new BloodControllerAttendantWQ();
                             
                    bhawq.setSender(userAccount);
                    bhawq.setStatus("Blood Supplied");
                    bhawq.setTypeOfBlood(bloodHeadAttendentWorkQueue.getTypeOfBlood());
                    bhawq.setNameOfPatient(bloodHeadAttendentWorkQueue.getNameOfPatient());
                    bhawq.setUnitsOfBlood(bloodHeadAttendentWorkQueue.getUnitsOfBlood());
                
             
                    HealthcareOrganisationAttendant bb = null;
                    for(Network network : system.getNetworkList())
                    {
                        if(network.getNetworkName().equals(network.getNetworkName()))
                        {
                            for(Enterprise ent : network.getEnterpriseCatalog().getEnterpriseList())
                            {
                                for(Organisation org : ent.getOrganizationCatalog().getOrganizationList())
                                {
                                    if(org.getName().equalsIgnoreCase("Attendant Organisation"))
                                    {
                                        for(User uacnt : org.getUserCatalog().getUserCatalog())
                                        {
                                            if(uacnt.getUsername().equalsIgnoreCase(bloodHeadAttendentWorkQueue.getSender().getUsername()))
                                            {
                                                bb = (HealthcareOrganisationAttendant)org;
                                                break;
                                            }
                                        }
                                    }
                                }   
                            }
                    
                            if (bb!= null)
                            {
                                bb.getBloodHeadAttendantWQ().getWorkRequestList().add(bhawq);
                                userAccount.getWorkQueue().getWorkRequestList().add(bhawq);
                            }   
                
                            JOptionPane.showMessageDialog(null, "Request Posted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                        }      
                    }
                }
           
           else
           {
               JOptionPane.showMessageDialog(null, "InSufficient blood quantity for this group at the moment", "Warning", JOptionPane.WARNING_MESSAGE);
           }
        } 
    }//GEN-LAST:event_btnAccept9ActionPerformed

    private void btnBack9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBack9ActionPerformed

        showPanel.remove(this);
        CardLayout layout = (CardLayout) showPanel.getLayout();
        layout.previous(showPanel);
    }//GEN-LAST:event_btnBack9ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BloodRequestJTable;
    private javax.swing.JButton btnAccept9;
    private javax.swing.JButton btnBack9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblTitle9;
    // End of variables declaration//GEN-END:variables

    
}
