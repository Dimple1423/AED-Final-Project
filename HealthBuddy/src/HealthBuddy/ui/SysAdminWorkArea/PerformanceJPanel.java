/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package HealthBuddy.ui.SysAdminWorkArea;

import HealthBuddy.models.EcoSystem;
import HealthBuddy.models.Healthcare.Appointment.AppointmentInformation;
import HealthBuddy.models.Trust.Donation.TrustDetails;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

/**
 *
 * @author Dimple Patel
 */
public class PerformanceJPanel extends javax.swing.JPanel {

    private JPanel showPanel;
    private EcoSystem ecosystem;
    private Map<String,Float> donors;
    /**
     * Creates new form PerformanceJPanel
     */
    public PerformanceJPanel(JPanel showPanel, EcoSystem system) {
        initComponents();
        this.showPanel = showPanel;
        this.ecosystem = system;
        this.donors = new HashMap<String, Float>();
        setSize(1540,800);
        populateDonorGraph();
        populateDoctorsGraph();
        populateOrgFundsGraph();
        populateHospitalGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jplDonorAll = new javax.swing.JPanel();
        jpbDoctorAll = new javax.swing.JPanel();
        jplFundsOrg = new javax.swing.JPanel();
        jplHospital = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setBackground(new java.awt.Color(0, 102, 102));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.setBorderPainted(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jplDonorAll.setLayout(new javax.swing.BoxLayout(jplDonorAll, javax.swing.BoxLayout.LINE_AXIS));

        jpbDoctorAll.setLayout(new javax.swing.BoxLayout(jpbDoctorAll, javax.swing.BoxLayout.LINE_AXIS));

        jplFundsOrg.setLayout(new javax.swing.BoxLayout(jplFundsOrg, javax.swing.BoxLayout.LINE_AXIS));

        jplHospital.setLayout(new javax.swing.BoxLayout(jplHospital, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jplDonorAll, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jpbDoctorAll, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jplFundsOrg, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jplHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jplFundsOrg, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jplDonorAll, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jplHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpbDoctorAll, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        showPanel.remove(this);
        CardLayout layout = (CardLayout) showPanel.getLayout();
        layout.previous(showPanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JPanel jpbDoctorAll;
    private javax.swing.JPanel jplDonorAll;
    private javax.swing.JPanel jplFundsOrg;
    private javax.swing.JPanel jplHospital;
    // End of variables declaration//GEN-END:variables

    private void populateDonorGraph() {
        DefaultPieDataset barDataset = new DefaultPieDataset();
        
        for (int i = 0; i < this.ecosystem.getDonationDirectory().getTrustCatalog().size(); i++) {
            TrustDetails fi= this.ecosystem.getDonationDirectory().getTrustCatalog().get(i);
            String donorsUserName  = fi.getDonor().getUsername();
            float amount = 0;
            if(this.donors.containsKey(fi.getDonor().getUsername()))
                amount = this.donors.get(fi.getDonor().getUsername());
            amount = amount + Float.parseFloat(fi.getDonation());
            this.donors.put(donorsUserName, amount);
        }
        
        for(String s : this.donors.keySet()){
             barDataset.setValue(s, this.donors.get(s));
        }
        
        JFreeChart piechart = ChartFactory.createPieChart("% of Donors donation " , barDataset, true, true, false);
        PiePlot piePlot = (PiePlot) piechart.getPlot();

//                piePlot.setSectionPaint("Abnormal", new Color(75, 228, 245));
//                piePlot.setSectionPaint("Normal", new Color(0,204,153));

        piePlot.setBackgroundPaint(Color.white);

        //create chartPanel to display chart(graph)
        ChartPanel barChartPanel = new ChartPanel(piechart);
        jplDonorAll.removeAll();
        jplDonorAll.repaint();
        jplDonorAll.add(barChartPanel, BorderLayout.CENTER);
        jplDonorAll.validate();
    }

    private void populateDoctorsGraph() {
        Map<String,Integer> doctors = new HashMap<String, Integer>();
        for (int i = 0; i < this.ecosystem.getAppointmentCatalog().getAppointmentCatalog().size(); i++) {
            AppointmentInformation ad=this.ecosystem.getAppointmentCatalog().getAppointmentCatalog().get(i);
            String doctorsName  = ad.getDoctorName();
            int  visitMadeByPatient = 0;
            
            if(doctors.containsKey(ad.getDoctorName()))
                visitMadeByPatient = doctors.get(ad.getDoctorName());
            
            visitMadeByPatient = visitMadeByPatient + 1;
            doctors.put(doctorsName, visitMadeByPatient); 
        }
        DefaultPieDataset barDataset = new DefaultPieDataset();
        
        String frequentlyVisitedDoctor = new String();
        for(String s : doctors.keySet()){
            barDataset.setValue(s, doctors.get(s));
        }    
        JFreeChart piechart = ChartFactory.createPieChart("Graph for Doctor's visit " , barDataset, true, true, false);
        PiePlot piePlot = (PiePlot) piechart.getPlot();

//                piePlot.setSectionPaint("Abnormal", new Color(75, 228, 245));
//                piePlot.setSectionPaint("Normal", new Color(0,204,153));

        piePlot.setBackgroundPaint(Color.white);

        //create chartPanel to display chart(graph)
        ChartPanel barChartPanel = new ChartPanel(piechart);
        jpbDoctorAll.removeAll();
        jpbDoctorAll.repaint();
        jpbDoctorAll.add(barChartPanel, BorderLayout.CENTER);
        jpbDoctorAll.validate();
    }

    private void populateOrgFundsGraph() {
        Map<String,Float> funds = new HashMap<String, Float>();
        for (int i = 0; i < ecosystem.getDonationDirectory().getTrustCatalog().size(); i++) {
            TrustDetails fi=ecosystem.getDonationDirectory().getTrustCatalog().get(i);
            String name  = fi.geTrustOrgName();
            float amount = 0;
            if(funds.containsKey(name))
                amount = funds.get(name);
            amount = amount + Float.parseFloat(fi.getDonation());
            funds.put(name, amount);
        }  
        DefaultPieDataset barDataset = new DefaultPieDataset();

        for(String s : funds.keySet())
        {
            barDataset.setValue(s, funds.get(s));
        }
        JFreeChart piechart = ChartFactory.createPieChart("Organisation Funds Graph " , barDataset, true, true, false);
        PiePlot piePlot = (PiePlot) piechart.getPlot();

//                piePlot.setSectionPaint("Abnormal", new Color(75, 228, 245));
//                piePlot.setSectionPaint("Normal", new Color(0,204,153));

        piePlot.setBackgroundPaint(Color.white);

        //create chartPanel to display chart(graph)
        ChartPanel barChartPanel = new ChartPanel(piechart);
        jplFundsOrg.removeAll();
        jplFundsOrg.repaint();
        jplFundsOrg.add(barChartPanel, BorderLayout.CENTER);
        jplFundsOrg.validate();
    }

    private void populateHospitalGraph() {
        
        Map<String,Integer> patient = new HashMap<String, Integer>();
   
        for (int i = 0; i < ecosystem.getAppointmentCatalog().getAppointmentCatalog().size(); i++) {
            AppointmentInformation ad=ecosystem.getAppointmentCatalog().getAppointmentCatalog().get(i);
            String nameOfHospital  = ad.getHospitalName();
            int  visitMadeByPatients = 0;
            if(patient.containsKey(ad.getHospitalName()))
            {
                visitMadeByPatients = patient.get(ad.getHospitalName());
            }
            visitMadeByPatients = visitMadeByPatients + 1;
            patient.put(nameOfHospital, visitMadeByPatients); 
        }
        DefaultPieDataset barDataset = new DefaultPieDataset();

    
        for(String s : patient.keySet())
        {
            barDataset.setValue(s, patient.get(s));
        }
       
        JFreeChart piechart = ChartFactory.createPieChart("Hospital Popularity" , barDataset, true, true, false);
        PiePlot piePlot = (PiePlot) piechart.getPlot();

//                piePlot.setSectionPaint("Abnormal", new Color(75, 228, 245));
//                piePlot.setSectionPaint("Normal", new Color(0,204,153));

        piePlot.setBackgroundPaint(Color.white);

        //create chartPanel to display chart(graph)
        ChartPanel barChartPanel = new ChartPanel(piechart);
        jplHospital.removeAll();
        jplHospital.repaint();
        jplHospital.add(barChartPanel, BorderLayout.CENTER);
        jplHospital.validate();
        
    }
}
