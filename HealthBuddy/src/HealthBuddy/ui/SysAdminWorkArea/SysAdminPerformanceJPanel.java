package HealthBuddy.ui.SysAdminWorkArea;

import java.awt.CardLayout;
import java.util.HashMap;
import java.util.Map;
import java.awt.Image;
import javax.swing.JPanel;
import javax.swing.ImageIcon;
import HealthBuddy.models.Healthcare.Appointment.AppointmentInformation;
import javax.swing.table.DefaultTableModel;
import HealthBuddy.models.EcoSystem;
import HealthBuddy.models.Trust.Donation.TrustDetails;

/**
 *
 * @author Nidhi Singh
 */
public class SysAdminPerformanceJPanel extends javax.swing.JPanel 
{
    private JPanel showPanel;
    private EcoSystem ecosystem;
    /**
     * Creates new form SystemAdminAnalyticsJPanel
     */
    public SysAdminPerformanceJPanel(JPanel showPanel, EcoSystem system) 
    {
        initComponents();
        this.showPanel = showPanel;
        this.ecosystem = system;
        setSize(1540,800);
          
    }
    
    private void populateJTable(String name, float value)
    {
        DefaultTableModel model = (DefaultTableModel) displayPerformanceTable.getModel();
        model.setRowCount(0);
        Object[] tuple = new Object[2];
        tuple[0] = name;
        tuple[1] = value;
        model.addRow(tuple);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        performancelabel = new javax.swing.JLabel();
        fundsbutton = new javax.swing.JButton();
        mostvisitedhostpitalbutton = new javax.swing.JButton();
        donorPrimeButton = new javax.swing.JButton();
        patientButton = new javax.swing.JButton();
        mostvisiteddoctorButton = new javax.swing.JButton();
        donorButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayPerformanceTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        graphButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createTitledBorder("Analytics Information"));
        setForeground(new java.awt.Color(0, 102, 102));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        performancelabel.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        performancelabel.setForeground(new java.awt.Color(0, 102, 102));
        performancelabel.setText("Performance");
        add(performancelabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 30, 260, -1));

        fundsbutton.setBackground(new java.awt.Color(0, 102, 102));
        fundsbutton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fundsbutton.setForeground(new java.awt.Color(255, 255, 255));
        fundsbutton.setText("Organisation With Maximum Funds");
        fundsbutton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fundsbutton.setBorderPainted(false);
        fundsbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fundsbuttonActionPerformed(evt);
            }
        });
        add(fundsbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 430, 320, 40));

        mostvisitedhostpitalbutton.setBackground(new java.awt.Color(0, 102, 102));
        mostvisitedhostpitalbutton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        mostvisitedhostpitalbutton.setForeground(new java.awt.Color(255, 255, 255));
        mostvisitedhostpitalbutton.setText("Most Visited Hospital");
        mostvisitedhostpitalbutton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mostvisitedhostpitalbutton.setBorderPainted(false);
        mostvisitedhostpitalbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostvisitedhostpitalbuttonActionPerformed(evt);
            }
        });
        add(mostvisitedhostpitalbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 380, 280, 40));

        donorPrimeButton.setBackground(new java.awt.Color(0, 102, 102));
        donorPrimeButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        donorPrimeButton.setForeground(new java.awt.Color(255, 255, 255));
        donorPrimeButton.setText("Prime Donor");
        donorPrimeButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        donorPrimeButton.setBorderPainted(false);
        donorPrimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorPrimeButtonActionPerformed(evt);
            }
        });
        add(donorPrimeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 480, 320, 40));

        patientButton.setBackground(new java.awt.Color(0, 102, 102));
        patientButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        patientButton.setForeground(new java.awt.Color(255, 255, 255));
        patientButton.setText("Most Patient");
        patientButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        patientButton.setBorderPainted(false);
        patientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientButtonActionPerformed(evt);
            }
        });
        add(patientButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 480, 280, 40));

        mostvisiteddoctorButton.setBackground(new java.awt.Color(0, 102, 102));
        mostvisiteddoctorButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        mostvisiteddoctorButton.setForeground(new java.awt.Color(255, 255, 255));
        mostvisiteddoctorButton.setText("Most visited Doctor");
        mostvisiteddoctorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        mostvisiteddoctorButton.setBorderPainted(false);
        mostvisiteddoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostvisiteddoctorButtonActionPerformed(evt);
            }
        });
        add(mostvisiteddoctorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 430, 280, 40));

        donorButton.setBackground(new java.awt.Color(0, 102, 102));
        donorButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        donorButton.setForeground(new java.awt.Color(255, 255, 255));
        donorButton.setText("Organisation With Maximum Donors");
        donorButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        donorButton.setBorderPainted(false);
        donorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorButtonActionPerformed(evt);
            }
        });
        add(donorButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 380, 320, 40));

        displayPerformanceTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        displayPerformanceTable.setForeground(new java.awt.Color(0, 102, 102));
        displayPerformanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayPerformanceTable.setSelectionBackground(new java.awt.Color(0, 102, 102));
        jScrollPane1.setViewportView(displayPerformanceTable);
        if (displayPerformanceTable.getColumnModel().getColumnCount() > 0) {
            displayPerformanceTable.getColumnModel().getColumn(0).setResizable(false);
            displayPerformanceTable.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 690, 220));

        btnBack.setBackground(new java.awt.Color(0, 102, 102));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back");
        btnBack.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnBack.setBorderPainted(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 40, 110, 40));

        ImageIcon imageIcon =  new ImageIcon(new ImageIcon(getClass().getResource("/HealthBuddy/ui/images/performance.gif")).getImage().getScaledInstance(700, 600, Image.SCALE_DEFAULT));
        jLabel1.setIcon(imageIcon);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 100, 670, 520));

        graphButton.setBackground(new java.awt.Color(0, 102, 102));
        graphButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        graphButton.setForeground(new java.awt.Color(255, 255, 255));
        graphButton.setText("View System Performance");
        graphButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        graphButton.setBorderPainted(false);
        graphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphButtonActionPerformed(evt);
            }
        });
        add(graphButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 540, 220, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void fundsbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fundsbuttonActionPerformed
        Map<String,Float> funds = new HashMap<String, Float>();
        for (int i = 0; i < ecosystem.getDonationDirectory().getTrustCatalog().size(); i++) {
            TrustDetails fi=ecosystem.getDonationDirectory().getTrustCatalog().get(i);
            String name  = fi.geTrustOrgName();
            float amount = 0;
            if(funds.containsKey(name))
                amount = funds.get(name);
            amount = amount + Float.parseFloat(fi.getDonation());
            funds.put(name, amount);
        }  
        float maxFunds =0;
        String fundedOrg = new String();
        for(String s : funds.keySet())
        {
            if(funds.get(s) > maxFunds){
                maxFunds = funds.get(s);
                fundedOrg = s;
            }
        }
        populateJTable(fundedOrg+ " has received highest donation  : ", maxFunds);
    }//GEN-LAST:event_fundsbuttonActionPerformed

    private void mostvisitedhostpitalbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostvisitedhostpitalbuttonActionPerformed
        Map<String,Integer> patient = new HashMap<String, Integer>();
   
        for (int i = 0; i < ecosystem.getAppointmentCatalog().getAppointmentCatalog().size(); i++) {
            AppointmentInformation ad=ecosystem.getAppointmentCatalog().getAppointmentCatalog().get(i);
            String nameOfHospital  = ad.getHospitalName();
            int  visitMadeByPatients = 0;
            if(patient.containsKey(ad.getHospitalName()))
            {
                visitMadeByPatients = patient.get(ad.getHospitalName());
            }
            visitMadeByPatients = visitMadeByPatients + 1;
            patient.put(nameOfHospital, visitMadeByPatients); 
        }
        
        float maxNumberOfVisits =0;
        String hospitalName = new String();
    
        for(String s : patient.keySet())
        {
            if(patient.get(s) > maxNumberOfVisits)
            {
                maxNumberOfVisits = patient.get(s);
                hospitalName = s;
            }
        }
   
        populateJTable(hospitalName + " is most visited Hospital: ", maxNumberOfVisits);
    }//GEN-LAST:event_mostvisitedhostpitalbuttonActionPerformed

    private void donorPrimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorPrimeButtonActionPerformed
        Map<String,Float> donators = new HashMap<String, Float>();
        for (int i = 0; i < ecosystem.getDonationDirectory().getTrustCatalog().size(); i++) {
            TrustDetails fi=ecosystem.getDonationDirectory().getTrustCatalog().get(i);
            String donorsUserName  = fi.getDonor().getUsername();
            float amount = 0;
            if(donators.containsKey(fi.getDonor().getUsername()))
                amount = donators.get(fi.getDonor().getUsername());
            amount = amount + Float.parseFloat(fi.getDonation());
            donators.put(donorsUserName, amount);
        }
        float maxAmountDonated =0;
        String donorsNameWhoDonotedMaximumMoney = new String();
        for(String s : donators.keySet()){
            if(donators.get(s) > maxAmountDonated){
                maxAmountDonated = donators.get(s);
                donorsNameWhoDonotedMaximumMoney = s;
            }
        }
        
        populateJTable(donorsNameWhoDonotedMaximumMoney+ " donated highest amount: ", maxAmountDonated);
    }//GEN-LAST:event_donorPrimeButtonActionPerformed

    private void patientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientButtonActionPerformed
        Map<String,Integer> patient = new HashMap<String, Integer>();
        for (int i = 0; i < ecosystem.getAppointmentCatalog().getAppointmentCatalog().size(); i++) {
            AppointmentInformation ad=ecosystem.getAppointmentCatalog().getAppointmentCatalog().get(i);
            String patientsUserName  = ad.getPatient().getUsername();
            int  NumberOfVisitsMadeByPatient = 0;
            if(patient.containsKey(ad.getPatient().getUsername()))
                NumberOfVisitsMadeByPatient = patient.get(ad.getPatient().getUsername());
            NumberOfVisitsMadeByPatient = NumberOfVisitsMadeByPatient + 1;
            patient.put(patientsUserName, NumberOfVisitsMadeByPatient);    
        }
        
        float maxNumberOfVisits =0;
        String mostActivePatientName = new String();
        
        for(String s : patient.keySet())
        {
            if(patient.get(s) > maxNumberOfVisits)
            {
                maxNumberOfVisits = patient.get(s);
                mostActivePatientName = s;
            }
        }
        populateJTable(mostActivePatientName+ " is mostly visited patient: ", maxNumberOfVisits);
    }//GEN-LAST:event_patientButtonActionPerformed

    private void mostvisiteddoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostvisiteddoctorButtonActionPerformed
        Map<String,Integer> doctors = new HashMap<String, Integer>();
        for (int i = 0; i < ecosystem.getAppointmentCatalog().getAppointmentCatalog().size(); i++) {
            AppointmentInformation ad=ecosystem.getAppointmentCatalog().getAppointmentCatalog().get(i);
            String doctorsName  = ad.getDoctorName();
            int  visitMadeByPatient = 0;
            
            if(doctors.containsKey(ad.getDoctorName()))
                visitMadeByPatient = doctors.get(ad.getDoctorName());
            
            visitMadeByPatient = visitMadeByPatient + 1;
            doctors.put(doctorsName, visitMadeByPatient); 
        }
        
        float maxNumberOfVisits =0;
        String frequentlyVisitedDoctor = new String();
        for(String s : doctors.keySet())
        {
            if(doctors.get(s) > maxNumberOfVisits)
            {
                maxNumberOfVisits = doctors.get(s);
                frequentlyVisitedDoctor = s;
            }
        }
        
        populateJTable(frequentlyVisitedDoctor+ " is a famous Doctor: ", maxNumberOfVisits);
    }//GEN-LAST:event_mostvisiteddoctorButtonActionPerformed

    private void donorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorButtonActionPerformed
        Map<String,Integer> mostfundedOrg = new HashMap<String, Integer>();
        for (int i = 0; i < ecosystem.getDonationDirectory().getTrustCatalog().size(); i++) {
            TrustDetails fi=ecosystem.getDonationDirectory().getTrustCatalog().get(i);
            String name  = fi.geTrustOrgName();
            int number = 0;
            if(mostfundedOrg.containsKey(name))
                number = mostfundedOrg.get(name);
            number = number + 1;
            mostfundedOrg.put(name, number); 
        }
        
        float max =0;
        String fundedOrg = new String();
        for(String s : mostfundedOrg.keySet())
        {
            if(mostfundedOrg.get(s) > max)
            {
                max = mostfundedOrg.get(s);
                fundedOrg = s;
            }
        }
        
        populateJTable(fundedOrg + " received maximum funds by Donor: " , max);
    }//GEN-LAST:event_donorButtonActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        showPanel.remove(this);
        CardLayout layout = (CardLayout) showPanel.getLayout();
        layout.previous(showPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void graphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphButtonActionPerformed
        // TODO add your handling code here:
        PerformanceJPanel performanceJPanel = new PerformanceJPanel(showPanel,ecosystem);
        showPanel.add("performanceJPanel",performanceJPanel);
        CardLayout layout=(CardLayout)showPanel.getLayout();
        layout.next(showPanel);
    }//GEN-LAST:event_graphButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JTable displayPerformanceTable;
    private javax.swing.JButton donorButton;
    private javax.swing.JButton donorPrimeButton;
    private javax.swing.JButton fundsbutton;
    private javax.swing.JButton graphButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mostvisiteddoctorButton;
    private javax.swing.JButton mostvisitedhostpitalbutton;
    private javax.swing.JButton patientButton;
    private javax.swing.JLabel performancelabel;
    // End of variables declaration//GEN-END:variables
}
