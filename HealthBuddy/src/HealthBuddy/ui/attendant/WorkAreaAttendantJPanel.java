package HealthBuddy.ui.attendant;

import javax.swing.JOptionPane;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import javax.swing.JPanel;
import HealthBuddy.models.EcoSystem;
import HealthBuddy.models.Enterprise.EnterpriseBloodDonorCenter;
import HealthBuddy.models.Enterprise.Enterprise;
import HealthBuddy.models.Healthcare.Appointment.AppointmentInformation;
import HealthBuddy.models.Healthcare.Organisation.HealthcareOrganisationAttendant;
import HealthBuddy.models.Network.Network;
import HealthBuddy.models.User.User;
import HealthBuddy.models.WorkQueue.BloodControllerAttendantWQ;
import HealthBuddy.models.WorkQueue.DoctorAttendantWQ;
import HealthBuddy.models.WorkQueue.WorkRequest;
import HealthBuddy.Config.Config;
import javax.swing.ImageIcon;
import java.awt.Image;

/**
 *
 * @author Dimple Patel
 * 
 */
public class WorkAreaAttendantJPanel extends javax.swing.JPanel {
    
    private JPanel displayJPanel;
    private Enterprise enterprise;
    private EcoSystem system;
    private Network network;
    private HealthcareOrganisationAttendant attendantOrg;
    private User ua;
    private AppointmentInformation appointment;

    /** Creates new form DonorWorkAreaPanel */
    public WorkAreaAttendantJPanel(JPanel displayJPanel, User userAccount ,HealthcareOrganisationAttendant attendantOrganisation, Enterprise enterprise,Network network,EcoSystem ecosystem) {
        initComponents();
        this.displayJPanel  = displayJPanel;
        this.attendantOrg = attendantOrganisation;
        this.enterprise = enterprise;
        this.system = ecosystem;
        this.network=network;
        this.ua=userAccount;
        populateAttendantTable();
        populateBloodStatusTable();
       lblAttendantName.setText(ua.getEmployee().getEmployeeName());
       setSize(1540,800);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        attendantTabbedPane = new javax.swing.JTabbedPane();
        workArea = new javax.swing.JPanel();
        lblWelcome = new javax.swing.JLabel();
        deliveryDirLabel3 = new javax.swing.JLabel();
        lblAttendantName = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        deliveryDirLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAttendant = new javax.swing.JTable();
        menuItemName1 = new javax.swing.JLabel();
        txtBloodQuant = new javax.swing.JTextField();
        btnReqBlood = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        checkStatus = new javax.swing.JPanel();
        deliveryDirLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBloodStatus = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 102, 102));

        attendantTabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        attendantTabbedPane.setForeground(new java.awt.Color(0, 102, 102));
        attendantTabbedPane.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        workArea.setBackground(new java.awt.Color(255, 255, 255));
        workArea.setForeground(new java.awt.Color(0, 102, 102));

        lblWelcome.setBackground(new java.awt.Color(255, 255, 255));
        lblWelcome.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblWelcome.setForeground(new java.awt.Color(0, 102, 102));
        lblWelcome.setText("Welcome ");

        deliveryDirLabel3.setBackground(new java.awt.Color(255, 255, 255));
        deliveryDirLabel3.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        deliveryDirLabel3.setForeground(new java.awt.Color(0, 102, 102));
        deliveryDirLabel3.setText("Attendant Work Area");

        lblAttendantName.setBackground(new java.awt.Color(255, 255, 255));
        lblAttendantName.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblAttendantName.setForeground(new java.awt.Color(0, 102, 102));
        lblAttendantName.setText("value");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(0, 102, 102));

        deliveryDirLabel2.setBackground(new java.awt.Color(255, 255, 255));
        deliveryDirLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deliveryDirLabel2.setForeground(new java.awt.Color(0, 102, 102));
        deliveryDirLabel2.setText("Patient Prescription Details");

        jScrollPane1.setForeground(new java.awt.Color(0, 102, 102));

        tblAttendant.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        tblAttendant.setForeground(new java.awt.Color(0, 102, 102));
        tblAttendant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Disease", "Doctor Name", "Blood Required", "Donation Required", "Blood Group", "Message"
            }
        ));
        jScrollPane1.setViewportView(tblAttendant);

        menuItemName1.setBackground(new java.awt.Color(255, 255, 255));
        menuItemName1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        menuItemName1.setForeground(new java.awt.Color(0, 102, 102));
        menuItemName1.setText("Total Units of Blood Required: ");

        txtBloodQuant.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtBloodQuant.setForeground(new java.awt.Color(0, 102, 102));
        txtBloodQuant.setText(" ");

        btnReqBlood.setBackground(new java.awt.Color(0, 102, 102));
        btnReqBlood.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnReqBlood.setForeground(new java.awt.Color(255, 255, 255));
        btnReqBlood.setText("Request Blood Bank");
        btnReqBlood.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnReqBlood.setBorderPainted(false);
        btnReqBlood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReqBloodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addComponent(menuItemName1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(txtBloodQuant, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 630, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReqBlood)
                .addGap(432, 432, 432))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(deliveryDirLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(deliveryDirLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuItemName1)
                    .addComponent(txtBloodQuant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReqBlood)
                .addGap(18, 18, 18))
        );

        ImageIcon imageIcon = new ImageIcon(new ImageIcon(getClass().getResource("/HealthBuddy/ui/images/attendant.gif")).getImage().getScaledInstance(500, 500, Image.SCALE_DEFAULT));

        jLabel5.setIcon(imageIcon);

        javax.swing.GroupLayout workAreaLayout = new javax.swing.GroupLayout(workArea);
        workArea.setLayout(workAreaLayout);
        workAreaLayout.setHorizontalGroup(
            workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workAreaLayout.createSequentialGroup()
                .addGroup(workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(workAreaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(workAreaLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deliveryDirLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(workAreaLayout.createSequentialGroup()
                                .addComponent(lblWelcome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAttendantName, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        workAreaLayout.setVerticalGroup(
            workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(workAreaLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(workAreaLayout.createSequentialGroup()
                        .addComponent(deliveryDirLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addGroup(workAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAttendantName))
                        .addGap(77, 77, 77)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        attendantTabbedPane.addTab("Work Area", workArea);

        checkStatus.setBackground(new java.awt.Color(255, 255, 255));
        checkStatus.setForeground(new java.awt.Color(0, 102, 102));

        deliveryDirLabel4.setBackground(new java.awt.Color(255, 255, 255));
        deliveryDirLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        deliveryDirLabel4.setForeground(new java.awt.Color(0, 102, 102));
        deliveryDirLabel4.setText("Blood Donor Center Request Status");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.darkGray, java.awt.Color.lightGray));
        jPanel2.setForeground(new java.awt.Color(0, 102, 102));

        jScrollPane3.setForeground(new java.awt.Color(0, 102, 102));

        tblBloodStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblBloodStatus.setForeground(new java.awt.Color(0, 102, 102));
        tblBloodStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Blood Type", "Quantity of Blood", "Request Status"
            }
        ));
        jScrollPane3.setViewportView(tblBloodStatus);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        ImageIcon imageIcona = new ImageIcon(new ImageIcon(getClass().getResource("/HealthBuddy/ui/images/checkstatus.gif")).getImage().getScaledInstance(500, 500, Image.SCALE_DEFAULT));

        jLabel2.setIcon(imageIcona);

        javax.swing.GroupLayout checkStatusLayout = new javax.swing.GroupLayout(checkStatus);
        checkStatus.setLayout(checkStatusLayout);
        checkStatusLayout.setHorizontalGroup(
            checkStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkStatusLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(checkStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deliveryDirLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(192, 192, 192)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(316, Short.MAX_VALUE))
        );
        checkStatusLayout.setVerticalGroup(
            checkStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkStatusLayout.createSequentialGroup()
                .addGroup(checkStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(checkStatusLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(deliveryDirLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(checkStatusLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );

        attendantTabbedPane.addTab("Check Status", checkStatus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(attendantTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(attendantTabbedPane)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnReqBloodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReqBloodActionPerformed
        // TODO add your handling code here:
        
        int selectedRow=tblAttendant.getSelectedRow();
        if(selectedRow>-1)
            {
                try {
                DoctorAttendantWQ docAttendantWorkQueue = (DoctorAttendantWQ)tblAttendant.getValueAt(selectedRow, 0);
                BloodControllerAttendantWQ bloodAttendantWorkQueue= new BloodControllerAttendantWQ();   
                bloodAttendantWorkQueue.setSender(ua);
                bloodAttendantWorkQueue.setUnitsOfBlood(Integer.parseInt(Config.getClippedText(txtBloodQuant)));
                bloodAttendantWorkQueue.setNameOfPatient(docAttendantWorkQueue.getAppointmentInformation().getPatient().getPatientName());
                bloodAttendantWorkQueue.setTypeOfBlood(docAttendantWorkQueue.getAppointmentInformation().getPatient().getBloodGroup());
                bloodAttendantWorkQueue.setMessage("InQueue");
                bloodAttendantWorkQueue.setSender(ua);
                EnterpriseBloodDonorCenter bloodBank = null;
                for(Network network : system.getNetworkList()){
                    if(network.getNetworkName().equals(this.network.getNetworkName()))
                    {
                    docAttendantWorkQueue.setMessage("Posted");
                    this.network.getBloodDonorCenterRequests().getWorkRequestList().add(bloodAttendantWorkQueue);
                    ua.getWorkQueue().getWorkRequestList().add(bloodAttendantWorkQueue);
                    txtBloodQuant.setText("");
                    populateAttendantTable();
                    JOptionPane.showMessageDialog(null, "Request sent successfully!!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    break;  
                } 
            }
                    populateBloodStatusTable();
            
            }catch (Exception e){
                JOptionPane.showMessageDialog(null,"Entered quantity is invalid!");
            }
            }   
            else
            {
                        JOptionPane.showMessageDialog(null, "Please select a Patient record!","Warning", JOptionPane.WARNING_MESSAGE);
            }
        
        populateBloodStatusTable();
    }//GEN-LAST:event_btnReqBloodActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane attendantTabbedPane;
    private javax.swing.JButton btnReqBlood;
    private javax.swing.JPanel checkStatus;
    private javax.swing.JLabel deliveryDirLabel2;
    private javax.swing.JLabel deliveryDirLabel3;
    private javax.swing.JLabel deliveryDirLabel4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAttendantName;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JLabel menuItemName1;
    private javax.swing.JTable tblAttendant;
    private javax.swing.JTable tblBloodStatus;
    private javax.swing.JTextField txtBloodQuant;
    private javax.swing.JPanel workArea;
    // End of variables declaration//GEN-END:variables
 
    //Populate Attendant Work Area Table
    public void populateAttendantTable()
    {
        DefaultTableModel model = (DefaultTableModel) tblAttendant.getModel();
        model.setRowCount(0);
        
        for(WorkRequest request : attendantOrg.getDoctorAttendantWQ().getWorkRequestList()){
            DoctorAttendantWQ doctorAttendantWorkQueue = new DoctorAttendantWQ();
            doctorAttendantWorkQueue = (DoctorAttendantWQ)request;
            Object[] row = new Object[7];
            row[0] = doctorAttendantWorkQueue;
            row[1] = doctorAttendantWorkQueue.getAppointmentInformation().getDiseases();
            row[2] = doctorAttendantWorkQueue.getAppointmentInformation().getDoctorName();
            row[3] = doctorAttendantWorkQueue.getAppointmentInformation().isIsBloodNeeded();
            row[4] = doctorAttendantWorkQueue.getAppointmentInformation().isFundNeeded();
            row[5]= doctorAttendantWorkQueue.getAppointmentInformation().getPatient().getBloodGroup();
            row[6] = doctorAttendantWorkQueue.getMessage();
            
            model.addRow(row);
        }        
    }
    
    //Populate Blood Status Table
    public void populateBloodStatusTable(){
    
    DefaultTableModel model = (DefaultTableModel) tblBloodStatus.getModel();
    model.setRowCount(0);
    
       for(WorkRequest request :attendantOrg.getBloodHeadAttendantWQ().getWorkRequestList()){
            BloodControllerAttendantWQ bloodAttendantWorkQueue = new BloodControllerAttendantWQ();
            bloodAttendantWorkQueue = (BloodControllerAttendantWQ)request;
            Object[] row = new Object[4];
            row[0] = bloodAttendantWorkQueue;
            row[1] = bloodAttendantWorkQueue.getTypeOfBlood();
            row[2] = bloodAttendantWorkQueue.getUnitsOfBlood();
            row[3]=request.getStatus();
           
            model.addRow(row);
        }
    }
}
