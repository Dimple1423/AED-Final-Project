package HealthBuddy.ui.patient;


import HealthBuddy.models.Enterprise.Enterprise;
import HealthBuddy.models.EcoSystem;
import HealthBuddy.models.Healthcare.Organisation.HealthcareOrganisationAssistant;
import HealthBuddy.models.Healthcare.Appointment.AppointmentInformation;
import HealthBuddy.models.Role.Patient;
import HealthBuddy.models.Organisation.Organisation;
import HealthBuddy.models.UserData.DonorData;
import HealthBuddy.models.User.User;
import HealthBuddy.models.UserData.PatientData;

import javax.swing.*;
import HealthBuddy.models.Network.Network;
import javax.swing.table.DefaultTableModel;
import HealthBuddy.models.WorkQueue.PatientBookingWQ;
import HealthBuddy.models.WorkQueue.AssistantAddingTimetoWQ;
import HealthBuddy.Config.SMSUtility;
import HealthBuddy.models.WorkQueue.WorkRequest;

import java.awt.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.ImageIcon;
import java.awt.Image;

/**
 *
 * @author Dimple Patel
 */
public class WorkAreaPatientPanel extends javax.swing.JPanel {
    DefaultTableModel appointmentDirectoryTableModel;
    DefaultTableModel appointmentHistoryTableModel;
    private User userAccount;
    private EcoSystem ecoSystem;
    private PatientData patientData;
    private Organisation organisation;
    private JPanel bodyPanel;

    /** Creates new form DonorWorkAreaPanel */
    public WorkAreaPatientPanel(JPanel bodyPanel, EcoSystem ecoSys, User userAcc, Organisation organisation) {
        ecoSystem = ecoSys;
        userAccount = userAcc;
        this.bodyPanel = bodyPanel;
        patientData = ecoSystem.getPatientDir().getPatient(userAcc.getUsername());
        this.organisation = organisation;
        initApptDirTableModel();
        initApptHistoryDirTableModel();
        initComponents();
        populateAvailAppontments();
        populateAppointmentHistoryTable();
        setSize(1540,800);


    }
    
    public void initApptDirTableModel() {
        appointmentDirectoryTableModel = new DefaultTableModel();
        appointmentDirectoryTableModel.addColumn("Hospital");
        appointmentDirectoryTableModel.addColumn("Doctor");
        appointmentDirectoryTableModel.addColumn("Timestamp");
        appointmentDirectoryTableModel.addColumn("Status");
    }
    
    public void initApptHistoryDirTableModel() {


        
        appointmentHistoryTableModel = new DefaultTableModel();
        appointmentHistoryTableModel.addColumn("Patient Name");

        appointmentHistoryTableModel.addColumn("Time stamp");
        appointmentHistoryTableModel.addColumn("Doctor Name");

        appointmentHistoryTableModel.addColumn("Hospital");
        appointmentHistoryTableModel.addColumn("City");
        appointmentHistoryTableModel.addColumn("Disease");    


    }
    
    
     public void populateAvailAppontments()
    {
        DefaultTableModel model = (DefaultTableModel) docScheduleTable.getModel();
        
        model.setRowCount(0);
        DateFormat formatter = new SimpleDateFormat("dd/mm/yyyy");

        for (Network network: ecoSystem.getNetworkList()) {
        
          for(WorkRequest request: ecoSystem.getPatientDir().getWorkQueue().getWorkRequestList()){
            AssistantAddingTimetoWQ assistantAddingTimingsWorkQueue = new AssistantAddingTimetoWQ();
              assistantAddingTimingsWorkQueue = (AssistantAddingTimetoWQ)request;
            if(network.getNetworkName().equals(assistantAddingTimingsWorkQueue.getCity()))
            {

                Object[] rowdata = {assistantAddingTimingsWorkQueue, assistantAddingTimingsWorkQueue.getDoctor(),
                        assistantAddingTimingsWorkQueue.getTimings(),
                        assistantAddingTimingsWorkQueue.getStatus() };

                model.addRow(rowdata);
            }
        }
          
        
      
        
        }
        
         
          
    }


    public void populateAppointmentHistoryTable() {
        DefaultTableModel model = (DefaultTableModel) tblAppHis.getModel();

        model.setRowCount(0);

        for(AppointmentInformation appDetails : ecoSystem.getAppointmentCatalog().getAppointmentCatalog())
        {
            if(userAccount.getUsername().equalsIgnoreCase(appDetails.getPatient().getUsername()))
            {
                Object[] row = new Object[6];
                row[0] = appDetails.getPatient().getPatientName();
                row[1] = appDetails.getDate();
                row[2] = appDetails.getDoctorName();
                row[3] = appDetails.getHospitalName();
                row[4] = appDetails.getCityOfTreated();
                row[5] = appDetails.getDiseases();

                model.addRow(row);
            }
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        donateTabbedPane = new javax.swing.JTabbedPane();
        mainmenuPanel = new javax.swing.JPanel();
        msgLabel = new javax.swing.JLabel();
        docScheduleScollPanel = new javax.swing.JScrollPane();
        docScheduleTable = new javax.swing.JTable();
        avbSlotslabel = new javax.swing.JLabel();
        buttonBck = new javax.swing.JButton();
        buttonbookSlot = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        mnghisTab = new javax.swing.JPanel();
        srchapHisscrlPane = new javax.swing.JScrollPane();
        tblAppHis = new javax.swing.JTable();
        apphismsgLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 102, 102));

        donateTabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        donateTabbedPane.setForeground(new java.awt.Color(0, 102, 102));
        donateTabbedPane.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        mainmenuPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainmenuPanel.setForeground(new java.awt.Color(0, 102, 102));
        mainmenuPanel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        msgLabel.setBackground(new java.awt.Color(255, 255, 255));
        msgLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        msgLabel.setForeground(new java.awt.Color(0, 102, 102));
        msgLabel.setText("Kindly Book an Appointment to Visit Doctor");

        docScheduleScollPanel.setForeground(new java.awt.Color(0, 102, 102));
        docScheduleScollPanel.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N

        docScheduleTable.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        docScheduleTable.setForeground(new java.awt.Color(0, 102, 102));
        docScheduleTable.setModel(appointmentDirectoryTableModel);
        docScheduleTable.setRowHeight(40);
        docScheduleTable.setSelectionBackground(new java.awt.Color(0, 102, 102));
        docScheduleScollPanel.setViewportView(docScheduleTable);

        avbSlotslabel.setBackground(new java.awt.Color(255, 255, 255));
        avbSlotslabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        avbSlotslabel.setForeground(new java.awt.Color(0, 102, 102));
        avbSlotslabel.setText("Available appointments");

        buttonBck.setBackground(new java.awt.Color(0, 102, 102));
        buttonBck.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        buttonBck.setForeground(new java.awt.Color(255, 255, 255));
        buttonBck.setText("<< Back");
        buttonBck.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonBck.setBorderPainted(false);
        buttonBck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBckActionPerformed(evt);
            }
        });

        buttonbookSlot.setBackground(new java.awt.Color(0, 102, 102));
        buttonbookSlot.setFont(new java.awt.Font("Tahoma", 1, 19)); // NOI18N
        buttonbookSlot.setForeground(new java.awt.Color(255, 255, 255));
        buttonbookSlot.setText("Book Appointment");
        buttonbookSlot.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonbookSlot.setBorderPainted(false);
        buttonbookSlot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonbookSlotActionPerformed(evt);
            }
        });

        ImageIcon imageIcont = new ImageIcon(new ImageIcon(getClass().getResource("/HealthBuddy/ui/images/appointment.gif")).getImage().getScaledInstance(600, 500, Image.SCALE_DEFAULT));

        jLabel2.setIcon(imageIcont);

        javax.swing.GroupLayout mainmenuPanelLayout = new javax.swing.GroupLayout(mainmenuPanel);
        mainmenuPanel.setLayout(mainmenuPanelLayout);
        mainmenuPanelLayout.setHorizontalGroup(
            mainmenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainmenuPanelLayout.createSequentialGroup()
                .addGroup(mainmenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainmenuPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(mainmenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(avbSlotslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainmenuPanelLayout.createSequentialGroup()
                                .addComponent(docScheduleScollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(mainmenuPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(buttonBck, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(buttonbookSlot, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(276, Short.MAX_VALUE))
        );
        mainmenuPanelLayout.setVerticalGroup(
            mainmenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainmenuPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(avbSlotslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainmenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(docScheduleScollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))
                .addGap(39, 39, 39)
                .addGroup(mainmenuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonbookSlot)
                    .addComponent(buttonBck))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        donateTabbedPane.addTab("New Appointment", mainmenuPanel);

        srchapHisscrlPane.setForeground(new java.awt.Color(0, 102, 102));
        srchapHisscrlPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tblAppHis.setFont(new java.awt.Font("Tahoma", 0, 19)); // NOI18N
        tblAppHis.setForeground(new java.awt.Color(0, 102, 102));
        tblAppHis.setModel(appointmentHistoryTableModel);
        tblAppHis.setRowHeight(40);
        tblAppHis.setSelectionBackground(new java.awt.Color(0, 102, 102));
        srchapHisscrlPane.setViewportView(tblAppHis);

        apphismsgLabel.setBackground(new java.awt.Color(255, 255, 255));
        apphismsgLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        apphismsgLabel.setForeground(new java.awt.Color(0, 102, 102));
        apphismsgLabel.setText("Appointment History");

        ImageIcon imageIconb = new ImageIcon(new ImageIcon(getClass().getResource("/HealthBuddy/ui/images/apphistorygif.gif")).getImage().getScaledInstance(650, 500, Image.SCALE_DEFAULT));

        jLabel1.setIcon(imageIconb);

        javax.swing.GroupLayout mnghisTabLayout = new javax.swing.GroupLayout(mnghisTab);
        mnghisTab.setLayout(mnghisTabLayout);
        mnghisTabLayout.setHorizontalGroup(
            mnghisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mnghisTabLayout.createSequentialGroup()
                .addGroup(mnghisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mnghisTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(srchapHisscrlPane, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mnghisTabLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(apphismsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(378, Short.MAX_VALUE))
        );
        mnghisTabLayout.setVerticalGroup(
            mnghisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mnghisTabLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(apphismsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(mnghisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(srchapHisscrlPane, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(127, Short.MAX_VALUE))
        );

        donateTabbedPane.addTab("Appointment History", mnghisTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(donateTabbedPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(donateTabbedPane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBckActionPerformed
        // TODO add your handling code here:
        bodyPanel.remove(this);
        CardLayout layout = (CardLayout) bodyPanel.getLayout();
        layout.previous(bodyPanel);
    }//GEN-LAST:event_buttonBckActionPerformed

    private void buttonbookSlotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonbookSlotActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) docScheduleTable.getModel();
        int selectedRow = docScheduleTable.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        AssistantAddingTimetoWQ request = (AssistantAddingTimetoWQ)docScheduleTable.getValueAt(selectedRow,0);
        if(request.getStatus().equals("Booked")){
            JOptionPane.showMessageDialog(null,"Kindly Select Valid Slot. The time you are trying to reserve is already taken.");
        }
        else{
            request.setStatus("Booked");
//            Network net = (Network) cityJComboBox.getSelectedItem();
            populateAvailAppontments();
            PatientBookingWQ patientBookingWorkQueue = new PatientBookingWQ();
            PatientData patientData = null;
            for(PatientData pat : ecoSystem.getPatientDir().getPatientCatalog()){
                if(pat.getUsername().equals(userAccount.getUsername()))
                {
                    patientData = pat;
                    break;
                }
            }
            patientBookingWorkQueue.setPatient(patientData);
            patientBookingWorkQueue.setSender(userAccount);
            patientBookingWorkQueue.setStatus("Booked");
            patientBookingWorkQueue.setCity(request.getCity());
            patientBookingWorkQueue.setDoctor(request.getDoctor());
            patientBookingWorkQueue.setHospitalName(request.getHealthcareName());
            Enterprise enterprise = null;
            for(Network n: ecoSystem.getNetworkList() ){
                for(Enterprise e: n.getEnterpriseCatalog().getEnterpriseList()){
                    if(e.getName().equalsIgnoreCase(request.getHealthcareName()))
                    {
                        enterprise = e;
                        break;
                    }
                }
            }
            HealthcareOrganisationAssistant org = null;
            for (Organisation o : enterprise.getOrganizationCatalog().getOrganizationList()){
                if(o instanceof HealthcareOrganisationAssistant)
                {
                    org = (HealthcareOrganisationAssistant)o;
                    break;
                }
            }
            org.getIncomingPatients().getWorkRequestList().add(patientBookingWorkQueue);
            userAccount.getWorkQueue().getWorkRequestList().add(patientBookingWorkQueue);

            String message = "Dear "+ patientData.getPatientName() +",\n\nYou have requested your appointment at " + " " + request.getTimings() + " with Doctor: " + request.getDoctor() + " at Hospital " + request.getHealthcareName()+"\n\nThank you,\nHealthBuddy Team";
            SMSUtility.sendSMS(patientData.getContactNo(), message);
            JOptionPane.showMessageDialog(null,"TimeSlot has been reserved.");

            populateAppointmentHistoryTable();
        }




    }//GEN-LAST:event_buttonbookSlotActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apphismsgLabel;
    private javax.swing.JLabel avbSlotslabel;
    private javax.swing.JButton buttonBck;
    private javax.swing.JButton buttonbookSlot;
    private javax.swing.JScrollPane docScheduleScollPanel;
    private javax.swing.JTable docScheduleTable;
    private javax.swing.JTabbedPane donateTabbedPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel mainmenuPanel;
    private javax.swing.JPanel mnghisTab;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JScrollPane srchapHisscrlPane;
    private javax.swing.JTable tblAppHis;
    // End of variables declaration//GEN-END:variables

}
